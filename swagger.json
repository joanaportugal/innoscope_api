{
	"openapi": "3.0.1",
	"info": {
		"title": "InnoScope API",
		"version": "1.0",
		"description": "InnoScope is DevScope's intern project for idea submission and realization into teams. It started at 2023's Academy."
	},
	"produces": [
		"application/json"
	],
	"schemes": [
		"http"
	],
	"components": {
		"securitySchemes": {
			"bearer": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		},
		"schemas": {
			"Users": {
				"type": "object",
				"required": [
					"user_name",
					"user_email"
				],
				"properties": {
					"user_id": {
						"type": "integer",
						"description": "ID of user"
					},
					"user_name": {
						"type": "string",
						"description": "Name of user"
					},
					"user_email": {
						"type": "string",
						"description": "Email of user",
						"format": "email"
					}
				},
				"example": {
					"user_name": "John Doe",
					"user_email": "john.doe@devscope.net"
				}
			},
			"Categories": {
				"type": "object",
				"required": [
					"category_name"
				],
				"properties": {
					"category_id": {
						"type": "integer",
						"description": "ID of category"
					},
					"category_name": {
						"type": "string",
						"description": "Name of category"
					}
				},
				"example": {
					"category_name": "Portals"
				}
			},
			"Technologies": {
				"type": "object",
				"required": [
					"technology_name"
				],
				"properties": {
					"technology_id": {
						"type": "integer",
						"description": "ID of technology"
					},
					"technology_name": {
						"type": "string",
						"description": "Name of technology"
					}
				},
				"example": {
					"technology_name": ".NET"
				}
			},
			"Ideas": {
				"type": "object",
				"required": [
					"idea_title",
					"idea_summary",
					"idea_description",
					"idea_complexity",
					"idea_durationWeeks",
					"CategoryCategoryId"
				],
				"properties": {
					"idea_id": {
						"type": "integer",
						"description": "ID of idea"
					},
					"idea_title": {
						"type": "string",
						"description": "Title of idea"
					},
					"idea_summary": {
						"type": "string",
						"description": "Brief description of idea"
					},
					"idea_description": {
						"type": "string",
						"description": "Full description of idea"
					},
					"idea_complexity": {
						"type": "string",
						"enum": [
							"Easy",
							"Medium",
							"Hard"
						],
						"description": "Complexity of idea"
					},
					"idea_durationWeeks": {
						"type": "integer",
						"description": "Time to complete idea",
						"minimum": 1
					},
					"idea_isAnon": {
						"type": "boolean",
						"description": "Does author wants to keep his/her identity anonymous?",
						"default": false
					},
					"idea_status": {
						"type": "string",
						"enum": [
							"New",
							"On Voting",
							"Rejected",
							"Approved",
							"Waiting",
							"On Going",
							"Finished"
						],
						"description": "Status of idea",
						"default": "New"
					},
					"idea_details": {
						"type": "string",
						"description": "Extra details of idea"
					},
					"CategoryCategoryId": {
						"type": "integer",
						"description": "Category ID of idea"
					}
				},
				"example": {
					"idea_title": "Some title",
					"idea_summary": "The idea is about something",
					"idea_description": "Some description that it's supposed to be big",
					"idea_complexity": "Easy",
					"idea_durationWeeks": 2,
					"CategoryCategoryId": 1
				}
			},
			"Idea_Attachment": {
				"type": "object",
				"required": [
					"attachment_file",
					"attachment_isPublic",
					"IdeaIdeaId",
					"UserUserId"
				],
				"properties": {
					"attachment_id": {
						"type": "integer",
						"description": "ID of attachment"
					},
					"attachment_file": {
						"type": "string",
						"description": "File url of attachment"
					},
					"attachment_isPublic": {
						"type": "boolean",
						"description": "Is file visible for all users?"
					},
					"IdeaIdeaId": {
						"type": "integer",
						"description": "Idea ID associated with attachment"
					},
					"UserUserId": {
						"type": "integer",
						"description": "User ID who sent the attachment"
					}
				},
				"example": {
					"attachment_file": "wwww.file.com",
					"attachment_isPublic": true,
					"IdeaIdeaId": 1,
					"UserUserId": 1
				}
			},
			"Idea_Author": {
				"type": "object",
				"required": [
					"IdeaIdeaId",
					"UserUserId"
				],
				"properties": {
					"IdeaIdeaId": {
						"type": "integer",
						"description": "Idea ID"
					},
					"UserUserId": {
						"type": "integer",
						"description": "User ID who is author of idea"
					}
				},
				"example": {
					"IdeaIdeaId": 1,
					"UserUserId": 1
				}
			},
			"Idea_Technology": {
				"type": "object",
				"required": [
					"IdeaIdeaId",
					"TechnologyTechnologyId"
				],
				"properties": {
					"IdeaIdeaId": {
						"type": "integer",
						"description": "Idea ID"
					},
					"TechnologyTechnologyId": {
						"type": "integer",
						"description": "ID of technology used in idea"
					}
				},
				"example": {
					"IdeaIdeaId": 1,
					"TechnologyTechnologyId": 1
				}
			},
			"Idea_Interaction": {
				"type": "object",
				"required": [
					"IdeaIdeaId",
					"UserUserId"
				],
				"properties": {
					"interaction_id": {
						"type": "integer",
						"description": "ID of interaction"
					},
					"interaction_vote": {
						"type": "integer",
						"description": "Vote quantity of interaction",
						"minimum": 1,
						"maximum": 5
					},
					"interaction_comment": {
						"type": "string",
						"description": "Comment text of interaction"
					},
					"IdeaIdeaId": {
						"type": "integer",
						"description": "Idea ID"
					},
					"UserUserId": {
						"type": "integer",
						"description": "User ID who is author of idea"
					}
				},
				"example": {
					"IdeaIdeaId": 1,
					"UserUserId": 1,
					"interaction_vote": 5,
					"interaction_comment": "good idea"
				}
			},
			"Idea_Team": {
				"type": "object",
				"required": [
					"role",
					"IdeaIdeaId",
					"UserUserId"
				],
				"properties": {
					"ideateam_id": {
						"type": "integer",
						"description": "ID of idea_team"
					},
					"role": {
						"type": "string",
						"enum": [
							"Member",
							"Requested"
						],
						"default": "Requested",
						"description": "Type of role given to user for team"
					},
					"IdeaIdeaId": {
						"type": "integer",
						"description": "Idea ID for team"
					},
					"UserUserId": {
						"type": "integer",
						"description": "User ID who is member of team"
					}
				},
				"example": {
					"role": "Requested",
					"IdeaIdeaId": 1,
					"UserUserId": 1
				}
			},
			"Idea_Task": {
				"type": "object",
				"required": [
					"task_description",
					"task_dueDate",
					"IdeaIdeaId"
				],
				"properties": {
					"task_id": {
						"type": "integer",
						"description": "ID of task"
					},
					"task_description": {
						"type": "string",
						"description": "Description of task"
					},
					"task_status": {
						"type": "string",
						"enum": [
							"To Do",
							"Doing",
							"Done"
						],
						"default": "To Do",
						"description": "Status of task"
					},
					"task_dueDate": {
						"type": "integer",
						"description": "Due date of task (date format)"
					},
					"IdeaIdeaId": {
						"type": "integer",
						"description": "Idea ID"
					},
					"UserUserId": {
						"type": "integer",
						"description": "User ID who has to complete the task"
					}
				},
				"example": {
					"IdeaIdeaId": 1,
					"UserUserId": 1,
					"task_description": "create new page",
					"task_dueDate": "01-01-2021"
				}
			},
			"Notifications": {
				"type": "object",
				"required": [
					"notification_title",
					"notification_description",
					"UserUserId"
				],
				"properties": {
					"notification_id": {
						"type": "integer",
						"description": "ID of notification"
					},
					"notification_title": {
						"type": "string",
						"description": "Title of notification"
					},
					"notification_description": {
						"type": "string",
						"description": "Description of notification"
					},
					"UserUserId": {
						"type": "integer",
						"description": "User ID for notifications"
					}
				},
				"example": {
					"notification_title": "Update",
					"notification_description": "New status update on idea X",
					"UserUserId": 1
				}
			}
		},
		"parameters": {
			"userId": {
				"name": "userId",
				"in": "path",
				"description": "User ID",
				"required": true,
				"schema": {
					"type": "integer",
					"minimum": 1
				}
			},
			"ideaId": {
				"name": "ideaId",
				"in": "path",
				"description": "Idea ID",
				"required": true,
				"schema": {
					"type": "integer",
					"minimum": 1
				}
			},
			"taskId": {
				"name": "taskId",
				"in": "path",
				"description": "Task ID",
				"required": true,
				"schema": {
					"type": "integer",
					"minimum": 1
				}
			},
			"per_page": {
				"name": "per_page",
				"in": "query",
				"description": "Number of itens per page",
				"schema": {
					"type": "integer",
					"minimum": 1,
					"default": 20
				}
			},
			"curr_page": {
				"name": "curr_page",
				"in": "query",
				"description": "Number of current page",
				"schema": {
					"type": "integer",
					"minimum": 1,
					"default": 1
				}
			},
			"title": {
				"name": "title",
				"in": "query",
				"description": "Title to search",
				"schema": {
					"type": "string"
				}
			},
			"category": {
				"name": "category",
				"in": "query",
				"description": "Number of category to filter",
				"schema": {
					"type": "integer",
					"minimum": 1
				}
			},
			"status": {
				"name": "status",
				"in": "query",
				"description": "Status type to filter",
				"schema": {
					"type": "string",
					"enum": [
						"New",
						"On Voting",
						"Rejected",
						"Approved",
						"Waiting",
						"On Going",
						"Finished"
					]
				}
			},
			"sort": {
				"name": "sort",
				"in": "query",
				"description": "Sort type to order",
				"schema": {
					"type": "string",
					"enum": [
						"Name (A-Z)",
						"Name (Z-A)",
						"Creation (New-Old)",
						"Creation (Old-New)"
					]
				}
			}
		},
		"responses": {
			"unauthorized": {
				"description": "Unauthorized",
				"content": {
					"application/json": {
						"schema": {
							"type": "object"
						},
						"examples": {
							"No token": {
								"value": {
									"success": false,
									"msg": "You need to be authenticated to access to this route."
								}
							},
							"Invalid token": {
								"value": {
									"success": false,
									"msg": "Unauthorized."
								}
							}
						}
					}
				}
			},
			"unexistent_idea": {
				"description": "Unexistent idea id",
				"content": {
					"application/json": {
						"schema": {
							"type": "object"
						},
						"examples": {
							"Unexistent idea id": {
								"value": {
									"error": "Idea not found."
								}
							}
						}
					}
				}
			}
		}
	},
	"tags": [
		{
			"name": "Users",
			"description": "Users' routes"
		},
		{
			"name": "Categories",
			"description": "Categories' routes"
		},
		{
			"name": "Technologies",
			"description": "Technologies' routes"
		},
		{
			"name": "Ideas",
			"description": "Ideas' routes"
		}
	],
	"paths": {
		"/api/users/login": {
			"post": {
				"summary": "Register/Log user in the system",
				"operationId": "login",
				"tags": [
					"Users"
				],
				"requestBody": {
					"description": "user to log to the system",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Users"
							},
							"examples": {
								"User": {
									"summary": "Valid User",
									"value": {
										"name": "John Doe",
										"email": "john.doe@devscope.net"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "User logged",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Logged with token": {
										"value": {
											"token": "(jwt_token)"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Empty name": {
										"value": {
											"errors": [
												"Please enter a valid name."
											]
										}
									},
									"Only first name given": {
										"value": {
											"errors": [
												"Name has to be at least name and surname."
											]
										}
									},
									"Empty email": {
										"value": {
											"errors": [
												"Please enter a valid email address."
											]
										}
									},
									"Invalid email format": {
										"value": {
											"errors": [
												"Please enter a valid email address."
											]
										}
									},
									"Invalid email domain": {
										"value": {
											"errors": [
												"Email is not a DevScope email."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/users": {
			"get": {
				"summary": "Get list of users registered in the system",
				"operationId": "getUsers",
				"tags": [
					"Users"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"responses": {
					"200": {
						"description": "List of users",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"List of users": {
										"value": {
											"users": [
												{
													"user_id": 1,
													"user_name": "John Doe",
													"user_email": "john.doe@devscope.net"
												}
											]
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					}
				}
			}
		},
		"/api/users/me": {
			"get": {
				"summary": "Get logged user details",
				"operationId": "getUserData",
				"tags": [
					"Users"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"responses": {
					"200": {
						"description": "User details",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"List of users": {
										"value": {
											"user": {
												"user_id": 1,
												"user_name": "John Doe",
												"user_email": "john.doe@devscope.net"
											},
											"ideas": [],
											"tasks": []
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					}
				}
			}
		},
		"/api/users/me/ideas": {
			"get": {
				"summary": "Get logged user ideas",
				"operationId": "getAllIdeas",
				"tags": [
					"Users",
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/per_page"
					},
					{
						"$ref": "#/components/parameters/curr_page"
					},
					{
						"$ref": "#/components/parameters/title"
					},
					{
						"$ref": "#/components/parameters/category"
					},
					{
						"$ref": "#/components/parameters/status"
					},
					{
						"$ref": "#/components/parameters/sort"
					}
				],
				"responses": {
					"200": {
						"description": "List of users",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"List of users": {
										"value": {
											"ideas": [],
											"pagination": {
												"total": 0,
												"per_page": 20,
												"curr_page": 1,
												"prev_page": null,
												"next_page": null,
												"offset": 0,
												"to": 20,
												"last_page": 1
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid per page": {
										"value": {
											"errors": [
												"Please enter a valid per page quantity."
											]
										}
									},
									"Invalid current page": {
										"value": {
											"errors": [
												"Please enter a valid current page number."
											]
										}
									},
									"Invalid title filter": {
										"value": {
											"errors": [
												"Please enter a valid title."
											]
										}
									},
									"Invalid category filter": {
										"value": {
											"errors": [
												"Please enter a valid category."
											]
										}
									},
									"Invalid status filter": {
										"value": {
											"errors": [
												"Please enter a valid status."
											]
										}
									},
									"Invalid sort order": {
										"value": {
											"errors": [
												"Please enter a valid sort type."
											]
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Add a new idea",
				"operationId": "addIdea",
				"tags": [
					"Users",
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"requestBody": {
					"description": "idea to add to the system",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Ideas"
							},
							"examples": {
								"Valid Idea": {
									"summary": "Valid Idea",
									"value": {
										"title": "Idea",
										"summary": "Brief description",
										"description": "Big description of idea",
										"category": 1,
										"complexity": "Easy",
										"duration": 1,
										"technologies": [
											1
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Idea created",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea created": {
										"value": {
											"message": "Idea created."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"description": "Unexistent values",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Unexistent technologies": {
										"value": {
											"errors": [
												"Some technologies you're trying to add don't exist."
											]
										}
									},
									"Unexistent coauthors": {
										"value": {
											"errors": [
												"Some coauthors you're trying to add don't exist."
											]
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Empty title": {
										"value": {
											"errors": [
												"Please enter a title."
											]
										}
									},
									"Empty summary": {
										"value": {
											"errors": [
												"Please enter a summary."
											]
										}
									},
									"Empty description": {
										"value": {
											"errors": [
												"Please enter a description."
											]
										}
									},
									"Invalid category": {
										"value": {
											"errors": [
												"Please enter a valid category."
											]
										}
									},
									"Empty complexity": {
										"value": {
											"errors": [
												"Please enter a complexity."
											]
										}
									},
									"Invalid complexity": {
										"value": {
											"errors": [
												"Please enter a valid complexity."
											]
										}
									},
									"Invalid duration": {
										"value": {
											"errors": [
												"Please enter a valid duration."
											]
										}
									},
									"Invalid technologies list": {
										"value": {
											"errors": [
												"Please enter a list of technologies."
											]
										}
									},
									"Invalid technologies list itens": {
										"value": {
											"errors": [
												"Please enter valid technologies."
											]
										}
									},
									"Invalid coauthors list": {
										"value": {
											"errors": [
												"Please enter a list of coauthors."
											]
										}
									},
									"Invalid coauthors list itens": {
										"value": {
											"errors": [
												"Please enter valid coauthors."
											]
										}
									},
									"Empty details": {
										"value": {
											"errors": [
												"Please enter details."
											]
										}
									},
									"Invalid isAnon": {
										"value": {
											"errors": [
												"Please enter a valid value."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/users/me/ideas/{ideaId}": {
			"get": {
				"summary": "Get one idea that belongs to logged user",
				"operationId": "getOneUserIdea",
				"tags": [
					"Users",
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Idea item",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea item": {
										"value": {
											"idea": {
												"idea_id": 1,
												"idea_title": "Idea",
												"idea_summary": "Brief description",
												"idea_description": "Big description of idea",
												"idea_complexity": "Easy",
												"idea_durationWeeks": 1,
												"idea_status": "New",
												"categoryId": 1,
												"category": "Name",
												"technologies": [
													{
														"technology_id": 1,
														"technology_name": "TypeScript"
													}
												]
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"summary": "Edit one idea that belongs to logged user",
				"operationId": "editOneUserIdea",
				"tags": [
					"Users",
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"requestBody": {
					"description": "idea to edit to the system",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Users"
							},
							"examples": {
								"Valid User": {
									"summary": "Valid User",
									"value": {
										"name": "John Doe",
										"email": "john.doe@devscope.net"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Idea updated",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea updated": {
										"value": {
											"message": "Idea updated."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									},
									"Empty title": {
										"value": {
											"errors": [
												"Please enter a title."
											]
										}
									},
									"Empty summary": {
										"value": {
											"errors": [
												"Please enter a summary."
											]
										}
									},
									"Empty description": {
										"value": {
											"errors": [
												"Please enter a description."
											]
										}
									},
									"Invalid category": {
										"value": {
											"errors": [
												"Please enter a valid category."
											]
										}
									},
									"Empty complexity": {
										"value": {
											"errors": [
												"Please enter a complexity."
											]
										}
									},
									"Invalid complexity": {
										"value": {
											"errors": [
												"Please enter a valid complexity."
											]
										}
									},
									"Invalid duration": {
										"value": {
											"errors": [
												"Please enter a valid duration."
											]
										}
									},
									"Invalid status": {
										"value": {
											"errors": [
												"Please enter a valid status."
											]
										}
									},
									"Invalid technologies list": {
										"value": {
											"errors": [
												"Please enter a list of technologies."
											]
										}
									},
									"Invalid technologies list itens": {
										"value": {
											"errors": [
												"Please enter valid technologies."
											]
										}
									},
									"Invalid coauthors list": {
										"value": {
											"errors": [
												"Please enter a list of coauthors."
											]
										}
									},
									"Invalid coauthors list itens": {
										"value": {
											"errors": [
												"Please enter valid coauthors."
											]
										}
									},
									"Empty details": {
										"value": {
											"errors": [
												"Please enter details."
											]
										}
									},
									"Invalid isAnon": {
										"value": {
											"errors": [
												"Please enter a valid value."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/users/ranking": {
			"get": {
				"summary": "Get ranking list",
				"operationId": "getUsersRanking",
				"tags": [
					"Users"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"responses": {
					"200": {
						"description": "Ranking of users",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Ranking list": {
										"value": {
											"list": [
												{
													"user": "John Doe",
													"ideas": 0,
													"tasks": 0
												}
											]
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					}
				}
			}
		},
		"/api/categories": {
			"get": {
				"summary": "Get category list",
				"operationId": "getAllCategories",
				"tags": [
					"Categories"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"responses": {
					"200": {
						"description": "List of categories",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Ranking list": {
										"value": {
											"categories": [
												{
													"category_id": 1,
													"category_name": "category"
												}
											]
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					}
				}
			},
			"post": {
				"summary": "Add category to the system",
				"operationId": "createOneCategory",
				"tags": [
					"Categories"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"requestBody": {
					"description": "category to add to the system",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Categories"
							},
							"examples": {
								"Category": {
									"summary": "Category to add",
									"value": {
										"name": "cat"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Category added",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Category added": {
										"value": {
											"message": "Category created."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Empty name": {
										"value": {
											"errors": [
												"Please enter a category name."
											]
										}
									},
									"Existent name": {
										"value": {
											"errors": [
												"Category name already added."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/technologies": {
			"get": {
				"summary": "Get technology list",
				"operationId": "getAllTechnologies",
				"tags": [
					"Technologies"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"responses": {
					"200": {
						"description": "List of technologies",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Ranking list": {
										"value": {
											"technologies": [
												{
													"technology_id": 1,
													"technology_name": "technology"
												}
											]
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					}
				}
			},
			"post": {
				"summary": "Add category to the system",
				"operationId": "createOneCategory",
				"tags": [
					"Technologies"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"requestBody": {
					"description": "Technology to add to the system",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Technologies"
							},
							"examples": {
								"Technology": {
									"summary": "Technology to add",
									"value": {
										"name": "tech"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Technology added",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Technology added": {
										"value": {
											"message": "Technology created."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Empty name": {
										"value": {
											"errors": [
												"Please enter a technology name."
											]
										}
									},
									"Existent name": {
										"value": {
											"errors": [
												"Technology name already added."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/ideas": {
			"get": {
				"summary": "Get all ideas in the system",
				"operationId": "getAllCommunityIdeas",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/per_page"
					},
					{
						"$ref": "#/components/parameters/curr_page"
					},
					{
						"$ref": "#/components/parameters/title"
					},
					{
						"$ref": "#/components/parameters/category"
					},
					{
						"$ref": "#/components/parameters/status"
					},
					{
						"$ref": "#/components/parameters/sort"
					}
				],
				"responses": {
					"200": {
						"description": "List of users",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"List of users": {
										"value": {
											"ideas": [],
											"pagination": {
												"total": 0,
												"per_page": 20,
												"curr_page": 1,
												"prev_page": null,
												"next_page": null,
												"offset": 0,
												"to": 20,
												"last_page": 1
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid per page": {
										"value": {
											"errors": [
												"Please enter a valid per page quantity."
											]
										}
									},
									"Invalid current page": {
										"value": {
											"errors": [
												"Please enter a valid current page number."
											]
										}
									},
									"Invalid title filter": {
										"value": {
											"errors": [
												"Please enter a valid title."
											]
										}
									},
									"Invalid category filter": {
										"value": {
											"errors": [
												"Please enter a valid category."
											]
										}
									},
									"Invalid status filter": {
										"value": {
											"errors": [
												"Please enter a valid status."
											]
										}
									},
									"Invalid sort order": {
										"value": {
											"errors": [
												"Please enter a valid sort type."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/ideas/{ideaId}": {
			"get": {
				"summary": "Get one idea details",
				"operationId": "getCommunityIdeaDetails",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Idea item",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea item": {
										"value": {
											"idea": {
												"idea_id": 1,
												"idea_title": "Idea",
												"idea_summary": "Brief description",
												"idea_description": "Big description of idea",
												"idea_complexity": "Easy",
												"idea_durationWeeks": 1,
												"idea_status": "New",
												"categoryId": 1,
												"category": "Name",
												"technologies": [
													{
														"technology_id": 1,
														"technology_name": "TypeScript"
													}
												]
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			},
			"patch": {
				"summary": "Update one idea status to next status available",
				"operationId": "updateIdeaStatus",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Idea updated",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea updated": {
										"value": {
											"message": "Idea status updated successfully."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Error on update",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Cannot update": {
										"value": {
											"error": "Idea status cannot be updated."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/ideas/{ideaId}/interactions": {
			"get": {
				"summary": "Get votes and comments of idea",
				"operationId": "getIdeaInteractions",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Interactions list",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea interactions": {
										"value": {
											"voteAvg": 4,
											"comments": [
												{
													"comment": "text",
													"user": "John Doe"
												}
											]
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Add vote and/or comment to idea",
				"operationId": "addIdeaInteraction",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"requestBody": {
					"description": "comment/vote to add to idea",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object"
							},
							"examples": {
								"Vote": {
									"summary": "Vote to add to idea",
									"value": {
										"vote": 4
									}
								},
								"Comment": {
									"summary": "Comment to add to idea",
									"value": {
										"comment": "text"
									}
								},
								"Vote+Comment": {
									"summary": "Vote and comment to add to idea",
									"value": {
										"vote": 4,
										"comment": "text"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Interaction creation",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Interaction created/updated": {
										"value": {
											"message": "Interaction added or updated."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Interaction creation error",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea not open for interaction": {
										"value": {
											"message": "Idea is not open for interaction."
										}
									},
									"Idea's author interacting": {
										"value": {
											"message": "You can't interact with your idea."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									},
									"Invalid vote": {
										"value": {
											"errors": [
												"Please enter a valid vote between 1 and 5."
											]
										}
									},
									"Empty comment": {
										"value": {
											"errors": [
												"Please enter a comment."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/ideas/{ideaId}/members": {
			"get": {
				"summary": "Get idea current members",
				"operationId": "getCommunityIdeaMembers",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Members list",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea members": {
										"value": {
											"members": [
												{
													"user_id": 1,
													"user_name": "John Doe",
													"user_email": "john.doe@devscope.net",
													"role": "Member"
												}
											]
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Add current user to idea members",
				"operationId": "addLoggedUserToMembers",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Member added to idea collaborators",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Member added": {
										"value": {
											"message": "User added to team members."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Error on add",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea doesn't accept members (status)": {
										"value": {
											"error": "Idea is not open for members."
										}
									},
									"User is already member": {
										"value": {
											"error": "User is already in team."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"summary": "Leave idea members",
				"operationId": "removeLoggedUserFromMembers",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Member left",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Member left": {
										"value": {
											"message": "User removed from team members."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "User isn't a member",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Member error": {
										"value": {
											"error": "User is not in team."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/ideas/{ideaId}/tasks": {
			"get": {
				"summary": "Get idea tasks",
				"operationId": "getCommunityIdeaTasks",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"responses": {
					"200": {
						"description": "Idea's task list",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Idea tasks": {
										"value": {
											"tasks": [
												{
													"task_id": 1,
													"task_description": "description",
													"task_dueDate": "06/30/2023"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Idea's task list errors",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"User without permission": {
										"value": {
											"error": "You do not have permission to see tasks to this idea."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"summary": "Add task to idea",
				"operationId": "addCommunityIdeaTask",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					}
				],
				"requestBody": {
					"description": "task to add to idea",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object"
							},
							"examples": {
								"Task without user attribute": {
									"summary": "Idea without user",
									"value": {
										"description": "List requirements",
										"dueDate": "06/30/2023"
									}
								},
								"Task with user attribute": {
									"summary": "Idea without user",
									"value": {
										"description": "List requirements",
										"dueDate": "06/30/2023",
										"user": 1
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Task added to idea",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Task Added": {
										"value": {
											"message": "Task added to idea."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Idea's task list errors",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"User without permission": {
										"value": {
											"error": "You do not have permission to add tasks to this idea."
										}
									},
									"Idea status invalid for adding tasks": {
										"value": {
											"error": "Cannot add tasks for this idea."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"$ref": "#/components/responses/unexistent_idea"
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									},
									"Empty description": {
										"value": {
											"errors": [
												"Please enter a description."
											]
										}
									},
									"Empty due date": {
										"value": {
											"errors": [
												"Please enter a due date."
											]
										}
									},
									"Invalid due date": {
										"value": {
											"errors": [
												"Please enter a valid date format."
											]
										}
									},
									"Date before current date": {
										"value": {
											"error": "Pick a date after today."
										}
									},
									"Invalid user": {
										"value": {
											"errors": [
												"Please enter a user."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/ideas/{ideaId}/tasks/{taskId}": {
			"put": {
				"summary": "Edit task details",
				"operationId": "editCommunityIdeaTask",
				"tags": [
					"Ideas"
				],
				"security": [
					{
						"bearer": []
					}
				],
				"parameters": [
					{
						"$ref": "#/components/parameters/ideaId"
					},
					{
						"$ref": "#/components/parameters/taskId"
					}
				],
				"requestBody": {
					"description": "task to update to idea",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object"
							},
							"examples": {
								"Task without user attribute": {
									"summary": "Idea without user",
									"value": {
										"description": "List requirements",
										"dueDate": "06/30/2023"
									}
								},
								"Task with user attribute": {
									"summary": "Idea without user",
									"value": {
										"description": "List requirements",
										"dueDate": "06/30/2023",
										"user": 1
									}
								},
								"Task with status attribute": {
									"summary": "Idea without user",
									"value": {
										"description": "List requirements",
										"dueDate": "06/30/2023",
										"user": 1,
										"status": "On Going"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Task updated to idea",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Task updated": {
										"value": {
											"message": "Task updated successfully."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Idea's task list errors",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"User without permission": {
										"value": {
											"error": "You do not have permission to edit tasks to this idea."
										}
									},
									"Idea status invalid for adding tasks": {
										"value": {
											"error": "Cannot edit tasks for this idea."
										}
									}
								}
							}
						}
					},
					"401": {
						"$ref": "#/components/responses/unauthorized"
					},
					"404": {
						"description": "Unexistent idea id",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Unexistent idea id": {
										"value": {
											"error": "Idea not found."
										}
									},
									"Unexistent task associated": {
										"value": {
											"error": "Task not found or it doesn't belong to that idea."
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Invalid fields",
						"content": {
							"application/json": {
								"schema": {
									"type": "object"
								},
								"examples": {
									"Invalid idea id": {
										"value": {
											"errors": [
												"Please enter a valid idea id."
											]
										}
									},
									"Invalid task id": {
										"value": {
											"errors": [
												"Please enter a valid task id."
											]
										}
									},
									"Empty description": {
										"value": {
											"errors": [
												"Please enter a description."
											]
										}
									},
									"Empty due date": {
										"value": {
											"errors": [
												"Please enter a due date."
											]
										}
									},
									"Invalid due date": {
										"value": {
											"errors": [
												"Please enter a valid date format."
											]
										}
									},
									"Date before current date": {
										"value": {
											"error": "Pick a date after today."
										}
									},
									"Invalid user": {
										"value": {
											"errors": [
												"Please enter a user."
											]
										}
									},
									"Invalid status": {
										"value": {
											"errors": [
												"Please enter a valid status."
											]
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}